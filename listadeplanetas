import 'package:flutter/material.dart';
import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'CRUD Planetas',
      theme: ThemeData(primarySwatch: Colors.blue),
      home: PlanetListScreen(),
    );
  }
}

class Planet {
  int? id;
  String name;
  double distance;
  double size;
  String? nickname;

  Planet({
    this.id,
    required this.name,
    required this.distance,
    required this.size,
    this.nickname,
  });

  // Convertir um objeto Planet para Map para salvar no banco de dados
  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'name': name,
      'distance': distance,
      'size': size,
      'nickname': nickname,
    };
  }

  // Converter Map para Planet (para exibir os dados)
  factory Planet.fromMap(Map<String, dynamic> map) {
    return Planet(
      id: map['id'],
      name: map['name'],
      distance: map['distance'],
      size: map['size'],
      nickname: map['nickname'],
    );
  }
}

class DatabaseHelper {
  static final _databaseName = "planets.db";
  static final _databaseVersion = 1;
  static final table = 'planets';

  static final columnId = 'id';
  static final columnName = 'name';
  static final columnDistance = 'distance';
  static final columnSize = 'size';
  static final columnNickname = 'nickname';

  DatabaseHelper._privateConstructor();
  static final DatabaseHelper instance = DatabaseHelper._privateConstructor();

  static Database? _database;

  Future<Database> get database async {
    if (_database != null) return _database!;

    // Inicializando o banco de dados
    _database = await _initDatabase();
    return _database!;
  }

  // Abre o banco de dados
  _initDatabase() async {
    String path = join(await getDatabasesPath(), _databaseName);
    return await openDatabase(path, version: _databaseVersion, onCreate: _onCreate);
  }

  // Cria a tabela de planetas
  Future _onCreate(Database db, int version) async {
    await db.execute('''
          CREATE TABLE $table (
            $columnId INTEGER PRIMARY KEY,
            $columnName TEXT NOT NULL,
            $columnDistance REAL NOT NULL,
            $columnSize REAL NOT NULL,
            $columnNickname TEXT
          )
          ''');
  }

  // Inserir um novo planeta
  Future<int> insert(Planet planet) async {
    Database db = await database;
    return await db.insert(table, planet.toMap());
  }

  // Buscar todos os planetas
  Future<List<Planet>> getAllPlanets() async {
    Database db = await database;
    var result = await db.query(table);
    return result.isNotEmpty
        ? result.map((e) => Planet.fromMap(e)).toList()
        : [];
  }

  // Atualizar um planeta
  Future<int> update(Planet planet) async {
    Database db = await database;
    return await db.update(
      table,
      planet.toMap(),
      where: '$columnId = ?',
      whereArgs: [planet.id],
    );
  }

  // Deletar um planeta
  Future<int> delete(int id) async {
    Database db = await database;
    return await db.delete(
      table,
      where: '$columnId = ?',
      whereArgs: [id],
    );
  }
}

class PlanetListScreen extends StatefulWidget {
  @override
  _PlanetListScreenState createState() => _PlanetListScreenState();
}

class _PlanetListScreenState extends State<PlanetListScreen> {
  late Future<List<Planet>> _planetsFuture;

  @override
  void initState() {
    super.initState();
    _planetsFuture = DatabaseHelper.instance.getAllPlanets();
  }

  void _navigateToAddPlanetScreen([Planet? planet]) async {
    final result = await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => PlanetFormScreen(planet: planet),
      ),
    );
    if (result != null) {
      setState(() {
        _planetsFuture = DatabaseHelper.instance.getAllPlanets();
      });
    }
  }

  void _deletePlanet(int id) async {
    bool confirmDelete = await _showDeleteConfirmationDialog();
    if (confirmDelete) {
      await DatabaseHelper.instance.delete(id);
      setState(() {
        _planetsFuture = DatabaseHelper.instance.getAllPlanets();
      });
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text("Planeta excluído com sucesso")));
    }
  }

  Future<bool> _showDeleteConfirmationDialog() async {
    return await showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Confirmar Exclusão'),
          content: Text('Tem certeza de que deseja excluir este planeta?'),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(false),
              child: Text('Cancelar'),
            ),
            TextButton(
              onPressed: () => Navigator.of(context).pop(true),
              child: Text('Confirmar'),
            ),
          ],
        );
      },
    ) ??
        false;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Planetas')),
      body: FutureBuilder<List<Planet>>(
        future: _planetsFuture,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(child: CircularProgressIndicator());
          }
          if (!snapshot.hasData || snapshot.data!.isEmpty) {
            return Center(child: Text("Nenhum planeta cadastrado"));
          }

          final planets = snapshot.data!;
          return ListView.builder(
            itemCount: planets.length,
            itemBuilder: (context, index) {
              final planet = planets[index];
              return ListTile(
                title: Text(planet.name),
                subtitle: Text(planet.nickname ?? 'Sem apelido'),
                onTap: () => _navigateToAddPlanetScreen(planet),
                trailing: IconButton(
                  icon: Icon(Icons.delete),
                  onPressed: () => _deletePlanet(planet.id!),
                ),
              );
            },
          );
        },
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () => _navigateToAddPlanetScreen(),
        child: Icon(Icons.add),
      ),
    );
  }
}

class PlanetFormScreen extends StatefulWidget {
  final Planet? planet;

  PlanetFormScreen({this.planet});

  @override
  _PlanetFormScreenState createState() => _PlanetFormScreenState();
}

class _PlanetFormScreenState extends State<PlanetFormScreen> {
  final _formKey = GlobalKey<FormState>();
  late TextEditingController _nameController;
  late TextEditingController _distanceController;
  late TextEditingController _sizeController;
  late TextEditingController _nicknameController;

  @override
  void initState() {
    super.initState();
    if (widget.planet != null) {
      _nameController = TextEditingController(text: widget.planet!.name);
      _distanceController = TextEditingController(text: widget.planet!.distance.toString());
      _sizeController = TextEditingController(text: widget.planet!.size.toString());
      _nicknameController = TextEditingController(text: widget.planet!.nickname ?? '');
    } else {
      _nameController = TextEditingController();
      _distanceController = TextEditingController();
      _sizeController = TextEditingController();
      _nicknameController = TextEditingController();
    }
  }

  @override
  void dispose() {
    _nameController.dispose();
    _distanceController.dispose();
    _sizeController.dispose();
    _nicknameController.dispose();
    super.dispose();
  }

  void _savePlanet() async {
    if (_formKey.currentState!.validate()) {
      final planet = Planet(
        id: widget.planet?.id,
        name: _nameController.text,
        distance: double.parse(_distanceController.text),
        size: double.parse(_sizeController.text),
        nickname: _nicknameController.text.isNotEmpty ? _nicknameController.text : null,
      );
      if (planet.id == null) {
        await DatabaseHelper.instance.insert(planet);
        ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text("Planeta adicionado com sucesso")));
      } else {
        await DatabaseHelper.instance.update(planet);
        ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text("Planeta atualizado com sucesso")));
      }
      Navigator.pop(context, true);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text(widget.planet == null ? 'Adicionar Planeta' : 'Editar Planeta')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              TextFormField(
                controller: _nameController,
                decoration: InputDecoration(labelText: 'Nome do planeta'),
                validator: (value) => value!.isEmpty ? 'Nome é obrigatório' : null,
              ),
              TextFormField(
                controller: _distanceController,
                decoration: InputDecoration(labelText: 'Distância do Sol (UA)'),
                keyboardType: TextInputType.number,
                validator: (value) {
                  if (value!.isEmpty) return 'Distância é obrigatória';
                  if (double.tryParse(value) == null || double.parse(value) <= 0) return 'Valor inválido';
                  return null;
                },
              ),
              TextFormField(
                controller: _sizeController,
                decoration: InputDecoration(labelText: 'Tamanho (km)'),
                keyboardType: TextInputType.number,
                validator: (value) {
                  if (value!.isEmpty) return 'Tamanho é obrigatório';
                  if (double.tryParse(value) == null || double.parse(value) <= 0) return 'Valor inválido';
                  return null;
                },
              ),
              TextFormField(
                controller: _nicknameController,
                decoration: InputDecoration(labelText: 'Apelido (opcional)'),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _savePlanet,
                child: Text(widget.planet == null ? 'Salvar' : 'Atualizar'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

